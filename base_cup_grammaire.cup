// Specification JCup
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

terminal DEBUT_DOMUS, FIN_DOMUS, DEBUT_APPAREIL, FIN_APPAREIL, DEBUT_INTERFACES, FIN_INTERFACES, DEBUT_SCENARII, FIN_SCENARII, DEBUT_COMMANDES, FIN_COMMANDES, APPAREIL, POINT, VIRGULE, IDENTIFICATEUR, IDENTIFICATEUR_INVALIDE, ENUM, ASSIGNATION,  PAROUVRE, PARFERME, INTERFACE, DEBUT_SCENARIO, FIN_SCENARIO, FONCTION_ETAT, POINT_VIRGULE, EXECUTER_SCENARIO, MESSAGE, TEXTE, TEXTE_INVALIDE, POURTOUT, PARCOURS, FAIRE, FAIT, SI, ALORS, SINON, FINSI, ASSOCIER, PROGRAMMER, DATE, ACFERME, ETAT, ACOUVRE, OPERATEUR, FIN_DE_BALISE;

non terminal ini, declaration,
liste_appareil, liste_identifiant_appareil, identifiant_appareil, liste_identifiant_appareil_enum, identifiant_appareil_enum, enum_appareil, appareil,
liste_interface, interface, identifiant_interface, liste_identifiant_interface,
scenarii, scenario, instructions_scenario, appel_fonction, fonction, fonction_valide, fonction_invalide, instruction, liste_instructions, execution, affichage, liste_elemts, elem, boucle, condition, test, entree, entree_appar, entree_ident, valeur, 
liste_commande,  commande, associer, liste_associer, liste_identifiant_associer, programmer, liste_date, liste_date_programmer, condition_si, condition_sinon;

ini ::= DEBUT_DOMUS declaration FIN_DOMUS;

declaration ::= DEBUT_APPAREIL liste_appareil  FIN_APPAREIL DEBUT_INTERFACES liste_interface FIN_INTERFACES DEBUT_SCENARII scenarii FIN_SCENARII DEBUT_COMMANDES liste_commande FIN_COMMANDES;

// ---------------------------DECLARATION APPAREIL---------------------------------------

liste_appareil ::= liste_appareil appareil | appareil | enum_appareil | liste_appareil enum_appareil;

appareil ::= APPAREIL liste_identifiant_appareil POINT;

liste_identifiant_appareil ::= liste_identifiant_appareil VIRGULE identifiant_appareil | identifiant_appareil | liste_identifiant_appareil identifiant_appareil;

identifiant_appareil ::= IDENTIFICATEUR | IDENTIFICATEUR_INVALIDE;

// ------GESTION DES ENUMS ------

enum_appareil ::= ENUM IDENTIFICATEUR:e ASSIGNATION ACOUVRE liste_identifiant_appareil_enum ACFERME POINT;

liste_identifiant_appareil_enum  ::= liste_identifiant_appareil_enum VIRGULE identifiant_appareil_enum | identifiant_appareil_enum;

identifiant_appareil_enum ::= IDENTIFICATEUR | IDENTIFICATEUR_INVALIDE;

// ---------------------------DECLARATION INTERFACE---------------------------------------

liste_interface ::= liste_interface interface | interface;

interface ::= INTERFACE:t liste_identifiant_interface POINT;

liste_identifiant_interface ::= liste_identifiant_interface VIRGULE identifiant_interface| identifiant_interface;

identifiant_interface ::= IDENTIFICATEUR:e {:System.out.println("interface : " + e);:}| IDENTIFICATEUR_INVALIDE;

// ---------------------------DECLARATION SCENARII---------------------------------------

scenarii ::= scenarii scenario:i {: System.out.println("\n\n---scenario : " + i); :} | scenario:i {: System.out.println("\n\n---scenario " + i); :};

// ---------------------------DECLARATION SCENARIO---------------------------------------

scenario ::= DEBUT_SCENARIO IDENTIFICATEUR FIN_DE_BALISE instructions_scenario FIN_SCENARIO IDENTIFICATEUR FIN_DE_BALISE;

instructions_scenario ::= instructions_scenario instruction | instruction;

liste_instructions ::= liste_instructions instruction {: System.out.println("encore instruction"); :} | instruction {: System.out.println("instruction"); :};

instruction ::= condition | affichage | execution | boucle | appel_fonction;

appel_fonction ::= IDENTIFICATEUR POINT fonction POINT_VIRGULE {: System.out.println("appel fonction terminée !"); :};

fonction ::= fonction_valide | fonction_invalide;

fonction_valide ::= FONCTION_ETAT;

fonction_invalide ::= IDENTIFICATEUR;

execution ::= EXECUTER_SCENARIO IDENTIFICATEUR POINT_VIRGULE {: System.out.println("execution scenario terminée !"); :};

affichage ::= MESSAGE PAROUVRE liste_elemts PARFERME POINT_VIRGULE {: System.out.println("affichage terminée !"); :} | MESSAGE PAROUVRE liste_elemts POINT_VIRGULE;

liste_elemts ::= liste_elemts VIRGULE elem | elem;

elem ::= TEXTE | IDENTIFICATEUR | IDENTIFICATEUR POINT FONCTION_ETAT | TEXTE_INVALIDE | ;

boucle ::= POURTOUT IDENTIFICATEUR PARCOURS entree FAIRE liste_instructions FAIT POINT_VIRGULE {: System.out.println("pour terminée !"); :};

entree ::= entree_appar | entree_ident;

entree_appar ::= APPAREIL;

entree_ident ::= IDENTIFICATEUR;

condition ::= condition_si | condition_sinon;

condition_si ::= SI test ALORS liste_instructions FINSI POINT_VIRGULE {: System.out.println("si terminé !"); :};

condition_sinon ::= SI test ALORS liste_instructions SINON {: System.out.println("attention liste_instructions"); :} liste_instructions FINSI POINT_VIRGULE {: System.out.println("sinon terminé !"); :};


test ::= PAROUVRE valeur OPERATEUR valeur PARFERME;

valeur ::= IDENTIFICATEUR POINT FONCTION_ETAT | ETAT;

// ---------------------------DECLARATION COMMANDE---------------------------------------

liste_commande ::= liste_commande commande | commande ;

commande ::= associer | programmer;

associer ::= ASSOCIER IDENTIFICATEUR ASSIGNATION liste_associer POINT | ASSOCIER IDENTIFICATEUR ASSIGNATION IDENTIFICATEUR POINT;

liste_associer ::= ACOUVRE liste_identifiant_associer ACFERME;

liste_identifiant_associer ::= liste_identifiant_associer VIRGULE IDENTIFICATEUR | IDENTIFICATEUR;

programmer ::= PROGRAMMER IDENTIFICATEUR:s ASSIGNATION liste_date POINT | PROGRAMMER IDENTIFICATEUR ASSIGNATION PAROUVRE DATE PARFERME POINT;

liste_date ::= ACOUVRE liste_date_programmer ACFERME;

liste_date_programmer ::= liste_date_programmer VIRGULE PAROUVRE DATE PARFERME | PAROUVRE DATE PARFERME;
